#!/bin/bash
set -e
set -o xtrace

script_root="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

make=${script_root}'/bin/j2objc/j2objc'
utopia_android_dir=$(cd ${script_root}'/../../utopia-android/app/src/main/java' && pwd)

tmp_dir=${script_root}'/tmp'
tmp_java_dir=${tmp_dir}'/java'
tmp_objc_dir=${tmp_dir}'/objc'
tmp_resources_dir=${tmp_dir}'/resources'
jar_cache_dir="${script_root}/.j2objc-cache"

rm -rf "${tmp_dir}" 2>/dev/null

mkdir -p "${jar_cache_dir}"
mkdir -p "${tmp_dir}"
mkdir -p "${tmp_java_dir}"
mkdir -p "${tmp_objc_dir}"
mkdir -p "${tmp_resources_dir}"

function copy_maven_dependency() {
    # https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-slf4j-impl/2.11.0/
    package="$1"
    name="$2"
    version="$3"

    jar_file="${name}-${version}-sources.jar"
    download_url="https://repo1.maven.org/maven2/$(echo "${package}" | sed 's/\./\//g')/${name}/${version}/${jar_file}"

    old_dir=`pwd`
    mkdir -p tmp/jar
    cd tmp/jar/
    if [ ! -f "${jar_cache_dir}/${jar_file}" ]; then
        cd "${jar_cache_dir}"
        wget "${download_url}"
        cd -
    fi
    mkdir -p unzip
    mv "${jar_cache_dir}/${jar_file}" unzip/.
    cd unzip
    unzip "${jar_file}"
    mv "${jar_file}" "${jar_cache_dir}/."
    # rm -r org/bouncycastle/gpg/test 2>/dev/null # Remove test files...
    find org -type d -iname 'test' | xargs rm -rf 2>/dev/null # Remove test files...
    # rm -rf org/bouncycastle/x509 2>/dev/null
    rm -f org/bouncycastle/x509/util/LDAPStoreHelper.java \
        org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java \
        org/bouncycastle/jce/provider/X509StoreLDAPCertPairs.java \
        org/bouncycastle/jce/provider/X509StoreLDAPAttrCerts.java \
        org/bouncycastle/jce/provider/X509StoreLDAPCRLs.java \
        org/bouncycastle/jce/provider/X509StoreLDAPCerts.java \
        2>/dev/null
    cp -R org "${tmp_java_dir}/."
    cd ..
    rm -rf unzip
    cd "${old_dir}"
}

function copy_softwareverde_dependency() {
    package="$1"
    project="$2"
    version="$3"

    dependency_dir="${tmp_dir}/${package}"
    mkdir -p "${dependency_dir}"
    cd "${dependency_dir}"
    git clone https://github.com/softwareverde/${project}.git
    cd "${project}"
    git checkout "${version}" 2>/dev/null
    cd ${script_dir}
    cp -R ${dependency_dir}/${project}/src/main/java/* "${tmp_java_dir}/."
}

function copy_java_files() {
    package="$1"
    files="$2"

    android_src_dir="${utopia_android_dir}"

    mkdir -p ${tmp_java_dir}/${package}

    if [[ "${files}" == "*" ]]; then
        cp ${android_src_dir}/${package}/*.java "${tmp_java_dir}/${package}/."
    else
        for file in ${files}; do
            cp ${android_src_dir}/${package}/${file}.java "${tmp_java_dir}/${package}/."
        done
    fi
}

# org.jsoup
jsoup_dir="${tmp_dir}/jsoup"
mkdir -p "${jsoup_dir}"
cd "${jsoup_dir}"
git clone https://github.com/jhy/jsoup.git
cd jsoup
git checkout a79d5e2 2>/dev/null
cd ${script_dir}
cp -R ${jsoup_dir}/jsoup/src/main/java/* "${tmp_java_dir}/."

# copy org.jsoup resources
cd ${jsoup_dir}/jsoup/src/main/java
files=$(find . -iname 'entities-*.properties')
for file in ${files}; do
    resource_path=$(dirname ${file})
    mkdir -p ${tmp_resources_dir}/${resource_path}
    cp ${file} ${tmp_resources_dir}/${resource_path}/.
done
cd -

copy_maven_dependency 'org.slf4j' 'slf4j-api' '1.8.0-alpha2'

copy_softwareverde_dependency "com.softwareverde.json" "json" "v1.0.5"
copy_softwareverde_dependency "com.softwareverde.util" "java-util" "master"
copy_softwareverde_dependency "com.softwareverde.logging" "java-logging" "master"

# com.softwareverde.util
package='com/softwareverde/util'
files='WebRequest WebRequestSynchronizer'
copy_java_files "${package}" "${files}"

# com.softwareverde.utopia
package='com/softwareverde/utopia'
files='Util'
copy_java_files "${package}" "${files}"

# com.softwareverde.utopia.bundle
package='com/softwareverde/utopia/bundle'
files='*'
copy_java_files "${package}" "${files}"

# com.softwareverde.utopia.news
package='com/softwareverde/utopia/news'
files='*'
copy_java_files "${package}" "${files}"

# com.softwareverde.utopia
package='com/softwareverde/utopia'
files='Province Science Kingdom Dragon DraftRate Spell Building UtopiaUtil Settings ChatCredentials ThieveryOperation TrainArmyData Forum Chatroom PrivateMessage ProvinceTagUtil Session NotificationMaker Vibrator ProvinceCredentials Scientist ActiveSpell HostilityMeter UtopiaCache'
copy_java_files "${package}" "${files}"

# com.softwareverde.utopia.util
package='com/softwareverde/utopia/util'
files='Base64Util JavaScriptExecutor BuildVersion'
copy_java_files "${package}" "${files}"

# com.softwareverde.utopia.parser
package='com/softwareverde/utopia/parser'
files='UtopiaParser HtmlParser JsoupHtmlParser'
copy_java_files "${package}" "${files}"

# com.softwareverde.utopia.database
package='com/softwareverde/utopia/database'
files='Database UtopiaDatabase UtopiaDatabaseV1 KeyValueStore'
copy_java_files "${package}" "${files}"

# com.softwareverde.utopia.intelsync
package='com/softwareverde/utopia/intelsync'
files='IntelSync IntelSyncFactory IntelSubmitter UpoopuUtil VerdeIntelUtil UmunkUtil StingerUtil'
copy_java_files "${package}" "${files}"


cd "${tmp_objc_dir}"
"$make" $(find ${tmp_java_dir} -iname '*.java')

cd -

rm -r "${script_root}/Utopia/java"
mkdir -p "${script_root}/Utopia/java"
cp -R ${tmp_objc_dir}/. "${script_root}/Utopia/java/."

rm -r "${script_root}/Utopia/java-resources"
mkdir -p "${script_root}/Utopia/java-resources"
cp -R ${tmp_resources_dir}/* "${script_root}/Utopia/java-resources/."

